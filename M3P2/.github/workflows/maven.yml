# Nombre del workflow que aparecerá en la pestaña "Actions" de GitHub.
name: Java CI with Maven

# Configura los disparadores para este workflow.
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Define los trabajos que se ejecutarán. En este caso, solo uno.
jobs:
  build:
    # Nombre del trabajo que se mostrará en la interfaz de GitHub.
    name: build

    # El tipo de máquina virtual en la que se ejecutará el trabajo.
    # Para este caso, se utilizará la última versión estable de Ubuntu.
    runs-on: ubuntu-latest

    # Secuencia de pasos que componen el trabajo.
    steps:
    # Paso 1: Clona tu repositorio en el runner de GitHub.
    # Esto permite que el workflow acceda a tu código.
    - uses: actions/checkout@v4

    # Paso 2: Configura el JDK 17.
    # Este paso utiliza la acción predefinida 'actions/setup-java'.
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        # Opcional: Habilita el almacenamiento en caché de las dependencias de Maven para acelerar las compilaciones.
        cache: maven

    # Paso 3: Compila el proyecto con Maven.
    # Ejecuta el comando de Maven para compilar y empaquetar el proyecto.
    # El flag -B ejecuta Maven en modo batch (no interactivo).
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    # Paso 4 (Opcional): Actualiza el gráfico de dependencias.
    # Este paso envía las dependencias del proyecto a GitHub para su análisis.
    # Ayuda a recibir alertas de seguridad de Dependabot con mayor precisión.
    - name: Update dependency graph
      uses: advanced-security/maven-dependency-submission-action@v4